-*- mode:hi-lock; eval: (highlight-regexp "^ \$.*" 'bold) -*-

When you delete a remote branch (locally) you can be left with a non-existent
'default' branch for that remote.

In practice, this looks like this:

 $ git branch -a
 * development
   migrating-from-cl-who
   production
   remotes/github/sebyte/HEAD -> github/sebyte/master
   remotes/github/sebyte/development
   remotes/github/sebyte/migrating-from-cl-who
   remotes/github/sebyte/production

 and it's clear from the output alone that github/sebyte/master no longer
 exists.

 `branch -a' doesn't cause git to complain, but this command does:

 $ git branch -a -v
 error: branch 'github/sebyte/HEAD' does not point at a commit
 * development                                 d7b08cd Fixed (and then decided to reimplement) EXTRACT-DECLARATIONS.  Forms such as:
   migrating-from-cl-who                       e7f5609 Made a start on this and then got sidetracked.  Incomplete.
   production                                  d7b08cd Fixed (and then decided to reimplement) EXTRACT-DECLARATIONS.  Forms such as:
   remotes/github/sebyte/development           d7b08cd Fixed (and then decided to reimplement) EXTRACT-DECLARATIONS.  Forms such as:
   remotes/github/sebyte/migrating-from-cl-who e7f5609 Made a start on this and then got sidetracked.  Incomplete.
   remotes/github/sebyte/production            d7b08cd Fixed (and then decided to reimplement) EXTRACT-DECLARATIONS.  Forms such as:

You can do away with a default branch altogether:

 $ git remote set-head -d github/sebyte

or change the default branch, like so:

 $ git remote set-head github/sebyte development



From the git-remote manpage:

 "set-head

    Sets or deletes the default branch ($GIT_DIR/remotes/<name>/HEAD) for the
    named remote. Having a default branch for a remote is not required, but
    allows the name of the remote to be specified in lieu of a specific
    branch. For example, if the default branch for origin is set to master, then
    origin may be specified wherever you would normally specify origin/master.

    With -d, $GIT_DIR/remotes/<name>/HEAD is deleted.

    With -a, the remote is queried to determine its HEAD, then
    $GIT_DIR/remotes/<name>/HEAD is set to the same branch. e.g., if the remote
    HEAD is pointed at next, 'git remote set-head origin -a' will set
    $GIT_DIR/refs/remotes/origin/HEAD to refs/remotes/origin/next. This will
    only work if refs/remotes/origin/next already exists; if not it must be
    fetched first.

    Use <branch> to set $GIT_DIR/remotes/<name>/HEAD explicitly. e.g., 'git
    remote set-head origin master' will set $GIT_DIR/refs/remotes/origin/HEAD to
    refs/remotes/origin/master. This will only work if
    refs/remotes/origin/master already exists; if not it must be fetched first."
